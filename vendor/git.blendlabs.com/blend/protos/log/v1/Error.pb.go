// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log/v1/Error.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// [START messages]
type Error struct {
	// severity is the meta class of the error, i.e. warning, error, fatal etc.
	Severity string `protobuf:"bytes,10,opt,name=severity" json:"severity,omitempty"`
	// class is the exception type or grouping value.
	Class string `protobuf:"bytes,11,opt,name=class" json:"class,omitempty"`
	// message is a descriptive or variable context of an error.
	Message string `protobuf:"bytes,12,opt,name=message" json:"message,omitempty"`
	// stack is the call stack where the error was generated.
	Stack []string `protobuf:"bytes,13,rep,name=stack" json:"stack,omitempty"`
	// inner is a cause or underlying error
	Inner *Error `protobuf:"bytes,14,opt,name=inner" json:"inner,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Error) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *Error) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetStack() []string {
	if m != nil {
		return m.Stack
	}
	return nil
}

func (m *Error) GetInner() *Error {
	if m != nil {
		return m.Inner
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "logv1.Error")
}

func init() { proto.RegisterFile("log/v1/Error.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0xcf, 0x4d, 0x0a, 0xc2, 0x30,
	0x10, 0x05, 0x60, 0x8a, 0xc4, 0x9f, 0x69, 0x75, 0x11, 0x5c, 0x04, 0x57, 0xa5, 0x20, 0x76, 0x95,
	0x50, 0xbd, 0x81, 0xe0, 0x05, 0xba, 0x74, 0x97, 0xd6, 0x10, 0x8a, 0x69, 0x23, 0x99, 0x50, 0xf0,
	0x10, 0xde, 0x59, 0x3a, 0x45, 0x97, 0xdf, 0xbc, 0x07, 0x79, 0x01, 0xee, 0xbc, 0x55, 0x63, 0xa5,
	0x6e, 0x21, 0xf8, 0x20, 0x5f, 0xc1, 0x47, 0xcf, 0x99, 0xf3, 0x76, 0xac, 0x8a, 0x4f, 0x02, 0x8c,
	0xce, 0xfc, 0x00, 0x6b, 0x34, 0xa3, 0x09, 0x5d, 0x7c, 0x0b, 0xc8, 0x93, 0x72, 0x53, 0xff, 0xcd,
	0xf7, 0xc0, 0x5a, 0xa7, 0x11, 0x45, 0x4a, 0xc1, 0x0c, 0x2e, 0x60, 0xd5, 0x1b, 0x44, 0x6d, 0x8d,
	0xc8, 0xe8, 0xfe, 0xe3, 0xd4, 0xc7, 0xa8, 0xdb, 0xa7, 0xd8, 0xe6, 0x8b, 0xa9, 0x4f, 0xe0, 0x05,
	0xb0, 0x6e, 0x18, 0x4c, 0x10, 0xbb, 0x3c, 0x29, 0xd3, 0x73, 0x26, 0x69, 0x82, 0xa4, 0xe7, 0xeb,
	0x39, 0xba, 0x9e, 0xee, 0x47, 0xdb, 0x45, 0xd9, 0x38, 0x33, 0x3c, 0x9c, 0x6e, 0x50, 0xb6, 0xbe,
	0x57, 0x24, 0x45, 0xbb, 0x51, 0xcd, 0x7f, 0x69, 0x96, 0xc4, 0xcb, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xce, 0x81, 0x5d, 0xb8, 0xdc, 0x00, 0x00, 0x00,
}
