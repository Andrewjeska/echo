// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log/v1/Message.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import smokesignalv1 "git.blendlabs.com/blend/protos/smoke-signal/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MessageType int32

const (
	MessageType_RAW                 MessageType = 0
	MessageType_VALUES              MessageType = 1
	MessageType_ERROR               MessageType = 2
	MessageType_HTTP                MessageType = 3
	MessageType_INFO                MessageType = 4
	MessageType_SMOKE_SIGNAL_RESULT MessageType = 100
)

var MessageType_name = map[int32]string{
	0:   "RAW",
	1:   "VALUES",
	2:   "ERROR",
	3:   "HTTP",
	4:   "INFO",
	100: "SMOKE_SIGNAL_RESULT",
}
var MessageType_value = map[string]int32{
	"RAW":                 0,
	"VALUES":              1,
	"ERROR":               2,
	"HTTP":                3,
	"INFO":                4,
	"SMOKE_SIGNAL_RESULT": 100,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// [START messages]
type Message struct {
	// type is the type of the object
	// it is used principally in routing to processors.
	Type MessageType `protobuf:"varint,1,opt,name=type,enum=logv1.MessageType" json:"type,omitempty"`
	// meta contains extra metadata for the message like timestamp.
	Meta        *Meta        `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Raw         *Raw         `protobuf:"bytes,100,opt,name=raw" json:"raw,omitempty"`
	Values      *Values      `protobuf:"bytes,101,opt,name=values" json:"values,omitempty"`
	Error       *Error       `protobuf:"bytes,102,opt,name=error" json:"error,omitempty"`
	HttpRequest *HttpRequest `protobuf:"bytes,103,opt,name=httpRequest" json:"httpRequest,omitempty"`
	Info        *Info        `protobuf:"bytes,104,opt,name=info" json:"info,omitempty"`
	// these are nonstandard, app specific message types
	SmokeSignalResult *smokesignalv1.Result `protobuf:"bytes,200,opt,name=smokeSignalResult" json:"smokeSignalResult,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Message) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MessageType_RAW
}

func (m *Message) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Message) GetRaw() *Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Message) GetValues() *Values {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Message) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Message) GetHttpRequest() *HttpRequest {
	if m != nil {
		return m.HttpRequest
	}
	return nil
}

func (m *Message) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Message) GetSmokeSignalResult() *smokesignalv1.Result {
	if m != nil {
		return m.SmokeSignalResult
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "logv1.Message")
	proto.RegisterEnum("logv1.MessageType", MessageType_name, MessageType_value)
}

func init() { proto.RegisterFile("log/v1/Message.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xe1, 0x6e, 0xd3, 0x30,
	0x14, 0x85, 0x49, 0x9b, 0x76, 0x70, 0x03, 0x28, 0xf3, 0x40, 0x58, 0xd3, 0x24, 0xa6, 0x49, 0x83,
	0x09, 0x89, 0x44, 0x1b, 0xbc, 0x40, 0x11, 0x81, 0x55, 0x74, 0x2b, 0xba, 0xc9, 0x86, 0xb4, 0x3f,
	0x93, 0x4b, 0xdd, 0xac, 0x22, 0x8d, 0x43, 0xec, 0xb6, 0xda, 0x1b, 0xf2, 0x08, 0x3c, 0x0e, 0xca,
	0xcd, 0xdd, 0x28, 0xe2, 0x5f, 0x7c, 0xbe, 0x63, 0xdd, 0x73, 0x4f, 0x0c, 0xcf, 0x0a, 0x93, 0xc7,
	0xab, 0xe3, 0xf8, 0x4c, 0x5b, 0xab, 0x72, 0x1d, 0x55, 0xb5, 0x71, 0x46, 0xf4, 0x0a, 0x93, 0xaf,
	0x8e, 0x77, 0xb7, 0xef, 0xa1, 0x53, 0x2d, 0xd9, 0x0d, 0x59, 0x42, 0xb5, 0x66, 0x65, 0x87, 0x95,
	0x4b, 0x55, 0x2c, 0xb5, 0x65, 0x51, 0xb0, 0x98, 0xd4, 0xb5, 0xa9, 0x59, 0x93, 0xac, 0x9d, 0x3a,
	0x57, 0xa1, 0xfe, 0xb9, 0xd4, 0xd6, 0x31, 0xb9, 0x9b, 0x33, 0x2c, 0x67, 0x86, 0xa5, 0x3d, 0xbb,
	0x30, 0x3f, 0xf4, 0x5b, 0x3b, 0xcf, 0x4b, 0x55, 0xd0, 0x40, 0x6d, 0x97, 0x05, 0x5f, 0x38, 0xf8,
	0xdd, 0x81, 0x2d, 0x4e, 0x2c, 0x5e, 0x81, 0xef, 0x6e, 0x2b, 0x2d, 0xbd, 0x7d, 0xef, 0xe8, 0xe9,
	0x89, 0x88, 0x28, 0x7a, 0xc4, 0x34, 0xbb, 0xad, 0x34, 0x12, 0x17, 0x2f, 0xc1, 0x5f, 0x68, 0xa7,
	0x64, 0x67, 0xdf, 0x3b, 0x0a, 0x4e, 0x82, 0x7b, 0x9f, 0x53, 0x48, 0x40, 0xec, 0x41, 0xb7, 0x56,
	0x6b, 0x39, 0x25, 0x0e, 0xcc, 0x51, 0xad, 0xb1, 0x91, 0xc5, 0x21, 0xf4, 0x57, 0xb4, 0xa1, 0xd4,
	0x64, 0x78, 0xc2, 0x86, 0x76, 0x6d, 0x64, 0x28, 0x0e, 0xa0, 0xa7, 0x9b, 0x9d, 0xe5, 0x8c, 0x5c,
	0x8f, 0xd9, 0x45, 0x3d, 0x60, 0x8b, 0xc4, 0x7b, 0x08, 0x6e, 0xfe, 0x76, 0x20, 0x73, 0x72, 0xde,
	0x05, 0xdf, 0x68, 0x07, 0x37, 0x6d, 0x4d, 0xfe, 0x79, 0x39, 0x33, 0xf2, 0xe6, 0x9f, 0xfc, 0x4d,
	0x65, 0x48, 0x40, 0x7c, 0x84, 0x6d, 0x2a, 0x2d, 0xa5, 0xce, 0xda, 0xbe, 0xe4, 0x2f, 0x8f, 0xec,
	0xcf, 0x23, 0x42, 0x6d, 0x9d, 0xcd, 0x5a, 0x44, 0xf1, 0xff, 0x0b, 0x6f, 0xae, 0x20, 0xd8, 0xe8,
	0x4e, 0x6c, 0x41, 0x17, 0x07, 0xdf, 0xc2, 0x07, 0x02, 0xa0, 0x7f, 0x39, 0x18, 0x5d, 0x24, 0x69,
	0xe8, 0x89, 0x47, 0xd0, 0x4b, 0x10, 0xc7, 0x18, 0x76, 0xc4, 0x43, 0xf0, 0x4f, 0xb3, 0xec, 0x6b,
	0xd8, 0x6d, 0xbe, 0x86, 0xe7, 0x9f, 0xc6, 0xa1, 0x2f, 0x5e, 0xc0, 0x4e, 0x7a, 0x36, 0xfe, 0x92,
	0x5c, 0xa7, 0xc3, 0xcf, 0xe7, 0x83, 0xd1, 0x35, 0x26, 0xe9, 0xc5, 0x28, 0x0b, 0xa7, 0x1f, 0x5e,
	0x5f, 0x1d, 0xe6, 0x73, 0x17, 0x4d, 0x0a, 0x5d, 0x4e, 0x0b, 0x35, 0xb1, 0xd1, 0x77, 0xb3, 0x88,
	0xe9, 0x14, 0xd3, 0x7f, 0xb5, 0x71, 0xfb, 0x10, 0x26, 0x7d, 0x3a, 0xbe, 0xfb, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x10, 0x33, 0x07, 0xac, 0x9e, 0x02, 0x00, 0x00,
}
